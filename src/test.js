{"username":"Toja","tasks":[{"id":5,"correct":[2,1],"instruction":"# Moduł `react` służy do:","options":{"1":"budowania interfejsu opartego na komponentach","2":"wydajnej aktualizacji interfejsu użytkownika","3":"pobierania danych z sieci","4":"przechowywania stanu w localStorage"},"selectedOptions":[1]},{"id":10,"correct":[8],"instruction":"# Moduł `react-dom`:","options":{"6":"służy do budowania aplikacji natywnych","7":"jest niezbędny, jeżeli w pliku używamy składni JSX","8":"służy do osadzenie aplikacji reaktowej w DOM","9":"jest niezbędny, jeżeli chcemy korzystać z RESTowego API"},"selectedOptions":[6,7,8]},{"id":15,"correct":[11],"instruction":"# JSX w procesie kompilacji jest zamieniany na:","options":{"11":"JavaScript","12":"HTML","13":"DOM","14":"VirtualDOM"},"selectedOptions":[11]},{"id":20,"correct":[16,17],"instruction":"# Moduł `babel`:","options":{"16":"służy do zamiany konstrukcji JS nie obsługiwanych przez starsze przeglądarki na kod, który będzie można w nich uruchomić","17":"pozwala używać konstrukcji, które nie są jeszcze oficjalnie udokumentowane w standardzie EcmaScript","18":"automatycznie wyszukuje błędy logiczne w aplikacji","19":"jest niezbędny do budowania aplikacji w bibliotece React"},"selectedOptions":[16,17]},{"id":25,"correct":[21],"instruction":"# Moduł `eslint`:","options":{"21":"pozwala automatycznie wskazywać konstrukcje w JS uznane przez zespół za nieodpowiednie","22":"zamienia ES6 na ES5","23":"jest niezbędny do budowania aplikacji w bibliotece React","24":"nie istnieje"},"selectedOptions":[21]},{"id":30,"correct":[26],"instruction":"# Komponenty reaktowe możemy definiować za pomocą:","options":{"26":"klasy rozszerzającej klasę `React.Component`, posiadającej metodę `render`","27":"dowolnej klasy","28":"dowolnej klasy posiadającej metodę render","29":"obiektu z atrybutem `render`"},"selectedOptions":[26]},{"id":35,"correct":[31],"instruction":"# Komponent zdefiniowany za pomocą funkcji ma dostęp do:","options":{"31":"`props` jako pierwszego argumentu wywołania","32":"`props` zawsze poprzez nazwę \"props\" lub `this.props`","33":"`state` pod `this.state`","34":"cyklu życia komponentu"},"selectedOptions":[31]},{"id":40,"correct":[37,36],"instruction":"# Cykl życia komponentu to:","options":{"36":"mechanizm, który pozwala nam wywołać dowolne fragmenty kodu w określonych momentach działania aplikacji reaktowej","37":"sekwencja wywołań określonych metod zdefiniowanych w klasie komponentu","38":"czas, który liczymy od momentu przekazania pierwszego propsa do chwili wyrenderowania komponentu","39":"metoda `componentDidMount` oraz `render`"},"selectedOptions":[36,37]},{"id":45,"correct":[42,41],"instruction":"# Metoda `componentDidMount` komponentu:","options":{"41":"wywołuje się tylko raz dla danego komponentu","42":"wywoła się po pierwszym wywołaniu metody `render` komponentu","43":"wywoła się natychmiast po wywołaniu konstruktora","44":"wymaga pobrania danych z sieci"},"selectedOptions":[41,42]},{"id":50,"correct":[48,46,47,49],"instruction":"# Metoda `setState`:","options":{"46":"może przyjąć funkcję jako pierwszy i jako drugi argument","47":"może przyjąć obiekt jako pierwszy argument","48":"jest asynchroniczna","49":"wywołana w metodzie `render` powoduje błąd"},"selectedOptions":[46,47,48]},{"id":55,"correct":[53,51],"instruction":"# Metoda `render`:","options":{"51":"musi zwrócić wartość, którą React potrafi wyrenderować","52":"nie musi zwracać wartości","53":"może zwrócić wartość `null`","54":"nie jest obowiązkowa w komponencie zdefiniowanym za pomocą klasy"},"selectedOptions":[51]},{"id":60,"correct":[58,56],"instruction":"# Składnia klasy w ES6:","options":{"56":"jest tzw. \"syntactic sugar\" dla prototypów","57":"nie wymaga użycia słowa kluczowego `class`","58":"nie pozwala na nadawanie atrybutów klasie","59":"wymaga zdefiniowania metody `render`"},"selectedOptions":[56,57]},{"id":65,"correct":[62],"instruction":"# Destrukturyzacja:","options":{"61":"jest skróconym zapisem metody `Object.assign`","62":"służy do skrócenia zapisu definicji wielu zmiennych, których nazwy i wartości mają odpowiadać atrybutom danego obiektu","63":"jest skróconym zapisem metody `concat`","64":"tworzenia nowych metod w obiekcie"},"selectedOptions":[61,62]},{"id":70,"correct":[67],"instruction":"# Wywołanie klasy z ES6 bez poprzedzenia jej słowem kluczowym `new`:","options":{"66":"zmienia `this` we wszystkich metodach klasy","67":"jest niedozwolone i wywoła błąd","68":"sprawi, że obiekt `window` wzbogaci się niespodziewanie o nowe atrubuty","69":"jest zarezerwowane dla biblioteki React"},"selectedOptions":[66]},{"id":75,"correct":[73,74,71,72],"instruction":"# Firebase pozwala:","options":{"71":"budować aplikacje oparte na technologii websockets","72":"nadawać uprawnienia do odczytu i zapisu dla wybranych zasobów","73":"składować dane w nierelacyjnej bazie danych","74":"hostować kod aplikacji"},"selectedOptions":[71,72,73,74]},{"id":80,"correct":[76],"instruction":"# Metoda `Array.prototype.push` zwraca:","options":{"76":"długość tablicy po wykonaniu metody `push`","77":"nową tablicę","78":"długość tablicy przed wykonaniem metody `push`","79":"element dodany do tablicy"},"selectedOptions":[76]},{"id":85,"correct":[83],"instruction":"# Metoda `.once` dostępna na obiekcie Reference z biblioteki `firebase` zwraca:","options":{"81":"snapshot","82":"liczbę","83":"promise","84":"funkcję"},"selectedOptions":[81]},{"id":90,"correct":[87,88,86],"instruction":"# Żeby usunąć element z bazy na platformie `Firebase` mogę:","options":{"86":"użyć metody `.remove` dostępnej na obiekcie `Reference` z biblioteki `firebase`","87":"zapisać w odpowiedniej lokalizacji wartość `null`","88":"użyć metody DELETE protokołu HTTP, korzystając z RESTowego API Firebase","89":"użyć metody `.delete` dostępnej na obiekcie `Reference` z biblioteki `firebase`"},"selectedOptions":[86,87]},{"id":95,"correct":[91],"instruction":"# Jeżeli w danej lokalizacji w `Firebase` nie ma danych, to próba ich odczytu sprawi, że otrzymam:","options":{"91":"null","92":"undefined","93":"błąd","94":"pusty obiekt"},"selectedOptions":[91]},{"id":100,"correct":[96],"instruction":"# VirtualDOM jest:","options":{"96":"obiektem JS","97":"fragmentem kodu HTML","98":"ciągiem znaków","99":"mechanizmem przeglądarki www"},"selectedOptions":[96]},{"id":105,"correct":[102],"instruction":"# Metoda `React.createElement` zwraca:","options":{"101":"nowy element DOM","102":"fragment VirtualDOM","103":"ciąg znaków","104":"nie ma takiej metody"},"selectedOptions":[101]},{"id":110,"correct":[107,106],"instruction":"# Gdy korzystam z modułu `react-router-dom` i mam komponent `<Route path=\"/people/:personId\" component={View} />`, to wiem, że:","options":{"106":"gdy odwiedzę adres `/people/1` w przeglądarce, to w komponencie `View` będę miał dostęp do wartości typu `string` pod `this.props.match.params.personId`","107":"gdy odwiedzę adres `/people/:personId` w przeglądarce, to w komponencie `View` będę miał dostęp do tekstu `:personId` pod `this.props.match.params.personId`","108":"gdy odwiedzę adres `/people/1` w przeglądarce, to w komponencie `View` będę miał dostęp do wartości typu `number` pod `this.props.match.params.personId`","109":"teskt podany jako wartość atrybutu `path` ma błąd - zamiast `personId` muszę użyć `peopleId` - inaczej `Router` wyrzuci `TypeError`"},"selectedOptions":[106]},{"id":115,"correct":[111],"instruction":"# Co oznacza, że protokół HTTP jest bezstanowy?","options":{"111":"Serwer nie wie, że dostaje żądania od tego samego klienta. I tak obsługuje je jakby był to nowy klient","112":"Nic nie jest wysyłane od klienta (np przeglądarki) do serwera","113":"Nie są wysyłane obiekty JSON z polem “state”","114":"Nie da się określić stanu serwera - czy istnieje i odpowiada"},"selectedOptions":[111]},{"id":120,"correct":[116,117],"instruction":"# Jak można wprowadzić “stan” w komunikacji po HTTP? (wiele odpowiedzi)","options":{"116":"Za pomocą ciasteczek","117":"Za pomocą sesji po stronie serwera (wysyłany jest identyfikator sesji, najczęściej w nagłówkach)","118":"Wysyłać obiekt JSON z polem “state”","119":"Wykonując tylko żądania typu GET"},"selectedOptions":[116,117]},{"id":125,"correct":[121],"instruction":"# Wysyłasz za pomocą formularza dane z rejestracji użytkownika w systemie. Imie, nazwisko, adres email, miasto. Jakiej metody HTTP (HTTP verb) użyjesz?:","options":{"121":"POST","122":"PUT","123":"TRACE","124":"GET"},"selectedOptions":[121]},{"id":130,"correct":[127,126,128],"instruction":"# Jako klient (przeglądarka) wysyłasz żądanie do serwera. W odpowiedzi dostajesz … no właśnie, co możesz dostać? (wiele odpowiedzi)","options":{"126":"status/kod odpowiedzi (200/400/401/500 itd)","127":"ciało odpowiedzi (body) z danymi np w JSON albo z HTML-em","128":"nagłówki","129":"torty (ang. birthday-cakes)"},"selectedOptions":[126,127,128]},{"id":135,"correct":[132],"instruction":"# Co daje wykorzystanie protokołu HTTPS (po SSL)?","options":{"131":"zielona kłódka w przeglądarce chroni naszą stronę przed cyberterrorystami","132":"przesyłana treść jest szyfrowana natomiast przesyłanie po HTTP jest zawsze jawnym tekstem","133":"“robot” googla nie zbiera danych z naszej strony","134":"gwarancję, że programista wykonał wszystko zgodnie ze sztuką"},"selectedOptions":[131,132]},{"id":140,"correct":[136],"instruction":"# Co zwraca funkcja `fetch`?","options":{"136":"obiekt Promise","137":"tekst odpowiedzi z serwera","138":"numer interwału","139":"nic nie zwraca"},"selectedOptions":[136,137]},{"id":145,"correct":[141],"instruction":"# W jakich stanach występują obiekty Promise?","options":{"141":"pending, resolved, rejected","142":"incomplete, rejected","143":"then, catch","144":"nie da się tego określić"},"selectedOptions":[141]},{"id":150,"correct":[146,147],"instruction":"# Obiekt Response posiada metody, które pozwalają:","options":{"146":"wyciągnąć dane tekstowe z odpowiedzi z serwera","147":"odczytać kod HTTP odpowiedzi z serwera","148":"anulować żądanie","149":"zamknąć okno przeglądarki"},"selectedOptions":[146,147]},{"id":155,"correct":[151],"instruction":"# Co zwraca metoda `.then` obiektu Promise?","options":{"151":"nowy obiekt Promise","152":"wartość, którą zwróci funkcja przekazana jako argument wywołania do metody `.then`","153":"tablicę znaków","154":"nic nie zwraca"},"selectedOptions":[151,152]},{"id":160,"correct":[156],"instruction":"# Do czego służy metoda `.catch` obiektu Promise?","options":{"156":"do przechwycenia błędu, który wystąpi w trakcie działania tego obiektu","157":"do zatrzymania łańcucha obietnic","158":"do zatrzymania żądania HTTP","159":"bez niej nie zadziała metoda `.then`"},"selectedOptions":[156]},{"id":165,"correct":[161],"instruction":"# Jeżeli chciałbym, żeby mój fragment kodu uruchomił się po pomyślnym rozwiązaniu się 2 niezależnych obiektów Promise, to powinienem użyć:","options":{"161":"`Promise.all`","162":"`Promise.every`","163":"`setTimeout` z długością interwału równą `0`","164":"`.then` na jednym z tych obiektów, a na drugim `.catch`"},"selectedOptions":[161]},{"id":170,"correct":[166],"instruction":"# Żeby z tablicy `[1, 2, 3]` otrzymać tablicę `[1, 3]` użyję:","options":{"166":"filter","167":"map","168":"reduce","169":"some"},"selectedOptions":[166]},{"id":175,"correct":[172],"instruction":"# Żeby z tablicy `[1, 2, 3]` otrzymać tablicę `[2, 4, 6]` użyję:","options":{"171":"every","172":"map","173":"filter","174":"some"},"selectedOptions":[171]},{"id":180,"correct":[178,179],"instruction":"# Żeby z tablicy `[1, 2, 3]` otrzymać wartość `true` użyję:","options":{"176":"filter","177":"map","178":"every","179":"some"},"selectedOptions":[176]},{"id":185,"correct":[182],"instruction":"# Metoda `Array.prototype.forEach` zwraca:","options":{"181":"tablicę","182":"undefined","183":"liczbę","184":"null"},"selectedOptions":[181]},{"id":190,"correct":[186],"instruction":"# Żeby z obiektu `{ x: 10, y: 20 }` otrzymać tablicę `['x', 'y']` użyję:","options":{"186":"Object.keys","187":"Object.entries","188":"Object.values","189":"Object.create"},"selectedOptions":[186,187]},{"id":195,"correct":[191],"instruction":"# Żeby z obiektu `{ x: 10, y: 20 }` otrzymać tablicę `[10, 20]` użyję:","options":{"191":"Object.values","192":"Object.keys","193":"Object.entries","194":"Object.create"},"selectedOptions":[191]},{"id":200,"correct":[196],"instruction":"# Kolejność atrybutów w obiekcie jest:","options":{"196":"niegwarantowana","197":"stała","198":"alfabetyczna","199":"numeryczna"},"selectedOptions":[196]},{"id":205,"correct":[201],"instruction":"# Metoda `push` z prototypu Array zwraca:","options":{"201":"długość tablicy po wykonaniu `push`","202":"długość tablicy przed wywołaniem `push`","203":"nową tablicę","204":"obiekt"},"selectedOptions":[201]},{"id":210,"correct":[206],"instruction":"# Żeby zmodyfikować tablicę, na którą wskazuje referencja ze zmiennej `var x = [1, 2, 3]` w taki sposób, że nie będzie już posiadała elementu `2` i jej długość skróci się o 1 użyję:","options":{"206":"splice","207":"slice","208":"filter","209":"some"},"selectedOptions":[206]},{"id":215,"correct":[213,211,212],"instruction":"# Funkcje czyste:","options":{"211":"zwracają wartość","212":"bazują swoje obliczenia na argumentach wywołania, a nie na zmiennych zdefiniowanych poza funkcją","213":"nie modyfikują zmiennych zdefiniowanych poza ich ciałem","214":"nie zwracają wartości"},"selectedOptions":[211,212,213]},{"id":220,"correct":[217,218,216],"instruction":"# Funkcje wyższego rzędu (Higher Order Functions):","options":{"216":"to m.in. `map`, `filter` i `reduce`","217":"mogą przyjmować funkcję jako argument","218":"mogą zwracać funkcję jako wartość","219":"mają ponad 100 linii kodu"},"selectedOptions":[216,217,218]},{"id":225,"correct":[222,223,221],"instruction":"# Prototyp:","options":{"221":"mechanizm pozwalający na ponowne użycie pewnych fragmentów kodu bez rezerwowania dodatkowych obszarów pamięci","222":"to obiekt","223":"to obiekt, do którego odwołuje się inny obiekt, jeżeli zapytamy go o wartość atrybutu, którego nie posiada","224":"to to samo co kontekst wywołania"},"selectedOptions":[221,222,223]},{"id":230,"correct":[228,229,227],"instruction":"# Wartość dostępna pod słowem kluczowym `this`:","options":{"226":"może zostać ustawiona z użyciem funkcji `apply`, nawet jeżeli funkcja, na której wywołamy tę metodę jest zrobiona z użyciem metody `bind`","227":"zawsze wskazuje na obiekt","228":"wskazuje na tzw. kontekst wywołania funkcji","229":"zależy od sposobu wywołania funkcji"},"selectedOptions":[226,227,228]},{"id":235,"correct":[231],"instruction":"# NodeJS jest:","options":{"231":"platformą, na której możemy uruchamiać skrypty w języku JavaScript","232":"biblioteką JavaScript","233":"niezbędny do uruchomienia aplikacji w Reakcie","234":"funkcją"},"selectedOptions":[231,232,233]},{"id":240,"correct":[236,237],"instruction":"# Webpack:","options":{"236":"pozwala połączyć wiele plików z kodem JavaScript w jeden","237":"pozwala zautomatyzować żmudne zadania front-endowe","238":"jest jedynym narzędziem do automatyzacji zadań dostępnym w NodeJS","239":"wymaga uprzedniego zainstalowania biblioteki `react` w systemie"},"selectedOptions":[236]},{"id":245,"correct":[241],"instruction":"# ESLint:","options":{"241":"pozwala w automatyczny sposób wyeliminować niektóre złe praktyki w kodzie","242":"potrafi zbudować projekt, łącząc wiele plików w jeden","243":"przetwarza pliki SCSS na CSS","244":"jest niezbędny do działania narzędzia `Webpack`"},"selectedOptions":[241]},{"id":250,"correct":[247,246],"instruction":"# Zmienne utworzone za pomocą słowa kluczowego `let`:","options":{"246":"posiadają taki sam scope jak `const`","247":"posiadają scope blokowy","248":"posiadają scope leksykalny (funkcyjny)","249":"nie mogą zmieniać swojej wartości"},"selectedOptions":[246,247]},{"id":255,"correct":[252],"instruction":"# Czy mogę zmienić wartość atrybutu obiektu zapisanego w stałej `const`?","options":{"251":"tak, ale tylko jeżeli zastąpię cały obiekt","252":"tak","253":"nie","254":"tak, ale tylko jeżeli użyję metody Object.create"},"selectedOptions":[251]},{"id":260,"correct":[257,256],"instruction":"# Metoda `Object.assign`:","options":{"256":"przyjmuje tylko argumenty będące obiektami","257":"przyjmuje dowolną liczbę argumentów","258":"zwraca nowy obiekt","259":"przyjmuje argumenty dowolnego typu"},"selectedOptions":[256,257]},{"id":265,"correct":[261,263,262,264],"instruction":"# Funkcje strzałkowe (arrow function):","options":{"261":"są anonimowe","262":"nie posiadają własnego `this` - pożyczają go z miejsca, gdzie zostały zdefiniowane","263":"nie mogą pełnić roli konstruktora","264":"nie posiadają własnego `arguments`"},"selectedOptions":[261,262,263]},{"id":270,"correct":[268,266],"instruction":"# Konstrukcja `let { a, b, c } = { a: 10, b: 20 }`:","options":{"266":"sprawi, że w scope pojawi się zmienna `c` o wartości `undefined`","267":"utworzy obiekt z atrybutami `a`, `b` oraz `c`","268":"utworzy 3 zmienne","269":"jest niepoprawna"},"selectedOptions":[266,267]},{"id":275,"correct":[271,272],"instruction":"# Jeżeli mam zmienne `let x = 10; let y = 20;` to zapis: `var foo = { x, y }`:","options":{"271":"utworzy obiekt z atrybutami `x: 10` oraz `y: 20`","272":"nazywa się `shorthand object notation`","273":"wywoła błąd","274":"sprawi, że w zmiennej `foo` pojawi się wartość `undefined`"},"selectedOptions":[271,272]},{"id":280,"correct":[276,277,279],"instruction":"# Jeżeli mam zmienne `let x = 10; let y = 20;` to zapis: `[x, y] = [y, x]`:","options":{"276":"zamieni wartości przechowywane w tych zmiennych","277":"sprawi, że zmienna `x` będzie posiadała wartość `20`","278":"jest niepoprawny składniowo","279":"utworzy nową tablicę"},"selectedOptions":[276,277]}]}